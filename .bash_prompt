# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 4);
    cyan=$(tput setaf 14);
    green=$(tput setaf 2);
    orange=$(tput setaf 215);
    purple=$(tput setaf 5);
    red=$(tput setaf 1);
    violet=$(tput setaf 7);
    white=$(tput setaf 15);
    yellow=$(tput setaf 3);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
	ochre="\033[38;5;95m"
fi;

prompt_git() {
    local s='';
    #local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        # branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        #    git rev-parse --short HEAD 2> /dev/null || \
        #    echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        #echo -e "${1}${branchName}${blue}${s}";
		echo -e "${s}"
    else
        return;
    fi;
}

# Printing git image for branch 
function git_image {
	if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
		echo ' ⎇ ';
	fi;
}

# Print branch or commit
function git_branch {
	local git_status="$(git status 2> /dev/null)"
	local on_branch="On branch ([^${IFS}]*)"
	local on_commit="HEAD detached at ([^${IFS}]*)"

	if [[ $git_status =~ $on_branch  ]]; then
		local branch=${BASH_REMATCH[1]}
		echo "$branch"
	elif [[ $git_status =~ $on_commit  ]]; then
		local commit=${BASH_REMATCH[1]}
		echo "$commit"
	fi

}

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
    userIcon="$"
else
    userStyle="${blue}";
    userIcon="➜"
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="\n\[${yellow}\][\u@\h]"
else
    # hostStyle="${blue}";
    hostStyle="\n\[${blue}\][\u]"
fi;

PS1="${hostStyle}" # user @ hostname at computer
PS1+="\[${green}\] \w"; # working directory
PS1+="\n\[${bold}\]\[${white}\]\[\e[40m\]\$(git_branch)\[${orange}\]\$(git_image)\[${blue}\]\$(prompt_git) "; # Git repository details
PS1+="\[${white}\]${userIcon} \[${reset}\] "; # `→` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
